class enemy {
	
	field int x, y;
	field int range1, range2, range3, range4;
	field memAddress memAddress;
	constructor enemy new(int posx, int posy) {
		let x = posx;
		let y = posy;
		
		do draw(y*32 + (x / 16));
		
		return this;
	}
	
	method void draw(int location) {
		let memAddress = 16384+location;
		do Memory.poke(memAddress+0, -32767);
		do Memory.poke(memAddress+32, -2048);
		do Memory.poke(memAddress+64, 1024);
		do Memory.poke(memAddress+96, 4608);
		do Memory.poke(memAddress+128, 12800);
		do Memory.poke(memAddress+160, 25088);
		do Memory.poke(memAddress+192, 16896);
		do Memory.poke(memAddress+224, 512);
		do Memory.poke(memAddress+256, -29684);
		do Memory.poke(memAddress+288, -28612);
		do Memory.poke(memAddress+320, 8432);
		do Memory.poke(memAddress+352, -15424);
		do Memory.poke(memAddress+384, -28928);
		do Memory.poke(memAddress+416, -1024);
		do Memory.poke(memAddress+448, 28672);
		do Memory.poke(memAddress+480, -16384);
		
		let location = location+1;
	    let memAddress = 16384+location;
		do Memory.poke(memAddress+0, 1);
		do Memory.poke(memAddress+32, 31);
		do Memory.poke(memAddress+64, 32);
		do Memory.poke(memAddress+96, 72);
		do Memory.poke(memAddress+128, 76);
		do Memory.poke(memAddress+160, 70);
		do Memory.poke(memAddress+192, 66);
		do Memory.poke(memAddress+224, 64);
		do Memory.poke(memAddress+256, 49);
		do Memory.poke(memAddress+288, 9);
		do Memory.poke(memAddress+320, 4);
		do Memory.poke(memAddress+352, 3);
		do Memory.poke(memAddress+384, 1);
		do Memory.poke(memAddress+416, 15);
		do Memory.poke(memAddress+448, 30);
		do Memory.poke(memAddress+480, 27);
		
		let location = location-1;
	    let location =location+(32*16);
	    let memAddress = 16384+location;
		do Memory.poke(memAddress+0, 16384);
		do Memory.poke(memAddress+32, -15356);
		do Memory.poke(memAddress+64, 18954);
		do Memory.poke(memAddress+96, -11791);
		do Memory.poke(memAddress+128, 16656);
		do Memory.poke(memAddress+160, -16160);
		do Memory.poke(memAddress+192, -16384);
		do Memory.poke(memAddress+224, 24576);
		do Memory.poke(memAddress+256, 12288);
		do Memory.poke(memAddress+288, 12288);
		do Memory.poke(memAddress+320, 6144);
		do Memory.poke(memAddress+352, 6144);
		do Memory.poke(memAddress+384, 6144);
		do Memory.poke(memAddress+416, 6144);
		do Memory.poke(memAddress+448, 6144);
		do Memory.poke(memAddress+480, 0);
		
		let location = location+1;
		let memAddress = 16384+location;
		do Memory.poke(memAddress+0, 50);
		do Memory.poke(memAddress+32, 99);
		do Memory.poke(memAddress+64, 98);
		do Memory.poke(memAddress+96, 195);
		do Memory.poke(memAddress+128, 194);
		do Memory.poke(memAddress+160, 3);
		do Memory.poke(memAddress+192, 3);
		do Memory.poke(memAddress+224, 6);
		do Memory.poke(memAddress+256, 12);
		do Memory.poke(memAddress+288, 12);
		do Memory.poke(memAddress+320, 24);
		do Memory.poke(memAddress+352, 24);
		do Memory.poke(memAddress+384, 24);
		do Memory.poke(memAddress+416, 24);
		do Memory.poke(memAddress+448, 24);
		do Memory.poke(memAddress+480, 0);
		
		return;
	}
	method void erase() {
		do Screen.setColor(false);
		do Screen.drawRectangle(x,y,x+32,y+32);
		return;
	}
	
	method void dispose() {
		do Memory.deAlloc(this);
		return;
	}
	
	method void moveupdown(int y1, int y2) {
		let range1 = y1;
		let range2 = y2;
		if(y = range1) {
			do Sys.wait(200);
			do erase();
			let y = range2;
			do draw(y*32 + (x / 16));
		}
		if(y = range2) {
			do Sys.wait(200);
			do erase();
			let y = range1;
			do draw(y*32 + (x / 16));
		}
		return;
	}
	method void moverightleft(int x1, int x2) {
		let range3 = x1;
		let range4 = x2;
		if(x = range3) {
			do Sys.wait(200);
			do erase();
			let x = range4;
			do draw(y*32 + (x / 16));
		}
		if(x = range4) {
			do Sys.wait(200);
			do erase();
			let x = range3;
			do draw(y*32 + (x / 16));
		}
		return;
	}
	
}
