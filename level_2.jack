class level_2{
	field mainrole role;
	field enemy enemy1, enemy2, enemy3,enemy4;
	field int direction;
	field boolen alive;
	field int x,y;
	field int bomb_x,bomb_y;
    field obstacle obstacle1, obstacle2, obstacle3, obstacle4, obstacle5, obstacle6, obstacle7, obstacle8, obstacle9, obstacle10, obstacel1, obstacel2, obstacel3, obstacel4, obstacle15, obstacle17, obstacle18, obstacle19, obstacle16, obstacle20;
    field wall wall1,wall2,wall3,wall4,wall5;
	
	constructor level_2 new(){
	    let x = 16;
	    let y = 16;
	    let alive = true;
	    do draw_map_wall();
	    do draw_map_obstacle();
	    let role = mainrole.new(x,y);
	    let enemy1=enemy.new(112,176);
	    let enemy2=enemy.new(208,144);
	    let enemy3=enemy.new(432,80);
	    let enemy4=enemy.new(368,176);
	    let direction = 0;
	   // do Output.printInt(2*(-1));
	    return this;
	}
	method void dispose() {
      do square.dispose();
      do Memory.deAlloc(this);
      return;
   }
    method void draw_map_wall(){
        do Screen.drawRectangle(0,0,15,255);
		do Screen.drawRectangle(496,0,511,255);
		do Screen.drawRectangle(15,0,495,15);
		do Screen.drawRectangle(15,240,496,255);
		return;
    }
    method void draw_map_obstacle(){
        let obstacle1= obstacle.new(48,112);
        let obstacle2= obstacle.new(48,144);
        let obstacle3= obstacle.new(48,176);
        let obstacle4= obstacle.new(80,112);
        let obstacle5= obstacle.new(112,112);
        let obstacle6= obstacle.new(144,112);
        let obstacle7= obstacle.new(144,80);
        let obstacle8= obstacle.new(144,144);
        let obstacle9= obstacle.new(144,176);
        let obstacle10= obstacle.new(144,208);
        let obstacle11= obstacle.new(176,80);
        let obstacle12= obstacle.new(208,80);
        let obstacle13= obstacle.new(240,80);
        let obstacle14= obstacle.new(272,80);
        let obstacle15= obstacle.new(304,80);
        let obstacle16= obstacle.new(336,80);
        let obstacle17= obstacle.new(336,48);
        let obstacle18= obstacle.new(272,112);
        let obstacle19= obstacle.new(272,144);
        let obstacle20= obstacle.new(272,176);
        return;

    }
	method void moveRole() {
      if (direction = 1) { do role.moveup(); }
      if (direction = 2) { do role.movedown(); }
      if (direction = 3) { do role.moveleft(); }
      if (direction = 4) { do role.moveright(); }
      do Sys.wait(5);  
      return;
   }
 /*   method void moveEnemy(){
        do enemy1.moveupdown(144,208);
        do enemy2.moverightleft(176,240);
        do enemy3.moveupdown(16,208);
        do enemy4.moverightleft(368,464);
        do Sys.wait(50);  
        return;
    }*/
    method void run() {
        var char key, key1; 
        var boolean exit;
        let exit = false;

        while (~exit) {
            let direction = 0;
            let key = Keyboard.keyPressed();

            if (key = 81)  { let exit = true; }      // q key
            if (key = 131) { let direction = 1; }
            if (key = 83) { let direction = 1; }     // s key
            if (key = 88)  { let direction = 2; }    // x key
            if (key = 133) { let direction = 2; }
            if (key = 90)  { let direction = 3; }    // z key
            if (key = 130) { let direction = 3; }
            if (key = 67) { let direction = 4; }     // c key
            if (key = 132) { let direction = 4; }
            do moveRole();
            do enemy1.moveupdown(48,176);
            do enemy2.moverightleft(80,432);
	    do enemy3.moveupdown(16,208);
            do enemy4.moverightleft(368,464);
            do Sys.wait(50);
            
            /*if (key = 32) { // space   
            do role.putbomb();
            do draw_map_wall();
            let alive = false; 
            }     */
            
         }

         if(~alive){
             do Output.moveCursor(12,25);
             do Output.printString("GAME OVER");
             do Output.println();
         }
         return;
    }  
}